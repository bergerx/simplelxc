#!/bin/bash

# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.

set -e
. /etc/simplelxc
. $BIN_DIR/functions

state=init

# backup stdout and stderr
exec 3>&1 4>&2

function usage {
	echo "usage: $(get_sl_command) create <guestname> [<ip>] [<template>]"
}

function show_error {
	color_echo RED "$1" >&4
	usage >&4
	exit 2
}

function error_trap {
	color_echo RED "Program terminated, guest is not created" >&4
	if [ "$state" != "init" -o "$state" != "checks" -o "$state" != "finished" ]; then
		if [ -n "$lxchostname" ]; then
			rm -rf --preserve-root $LXCS_DIR/$lxchostname
		fi
	fi
	exit 2
}

trap error_trap TERM INT

state=checks

lxchostname=$1

if [ -z "$lxchostname" ]; then
	show_error "You must give a guestname."
fi

if is_guest "$lxchostname"; then
	show_error "Guest '$lxchostname' already exists."
fi

if test -e "$LXCS_DIR/$lxchostname"; then
	show_error "Guest target already exists: $LXCS_DIR/$lxchostname"
fi

# second parameter could be an ip address or a template name, check if
# it is a valid ip or else search for a template with that name, this
# is a bit tricky but one of the simplest ways for users
second_param=$2
if [ -n "$second_param" ]; then
	if ! valid_ip "$second_param"; then
		if [ "$second_param" == "squeeze" -o "$second_param" == "wheezy" ] || is_template "$second_param"; then
			template_name=$second_param
		else
			show_error "Given '$second_param' is not an IP address nor a template."
		fi
	else
		ipaddr=$second_param
		template_name=${3:-$DEFAULT_TEMPLATE}
	fi
else
	color_echo YELLOW "Chosen default template '$DEFAULT_TEMPLATE' as template"
	template_name=$DEFAULT_TEMPLATE
fi

template_dir=$TEMPLATES_DIR/$template_name

if [ -z "$ipaddr" ]; then
	ipaddr=$(get_next_suitible_ip)
	color_echo YELLOW "Chosen $ipaddr as guest IP address"
fi

if ! valid_ip "$ipaddr"; then
	show_error "Not a valid ip address ($ipaddr) "
fi

if host "$lxchostname" | grep --color -C10 'has address' ; then
	show_error "Given name ($lxchostname) is in use."
fi

if check_ping "$ipaddr"; then
	show_error "Given ip address ($ipaddr) is in use."
fi

if ! $BIN_DIR/host-check &>/dev/null; then
	$BIN_DIR/host-prepare
fi

if [ "$template_name" == "squeeze" -o "$template_name" == "wheezy" ]; then
	if ! is_template "$template_name"; then
		color_echo YELLOW "Creating new template '$template_name'"
		$BIN_DIR/template-create "$template_name" "$template_name"
	fi
fi

if ! is_template "$template_name"; then
	show_error "Template ($template_name) not exists."
fi

# TODO: Next line generates same mac address for a given ip
#       address.What if we change a machines IP address manually and
#       then try to use old ip in an other machine.
mac=$(printf "02:00:%02x:%02x:%02x:%02x" ${ipaddr//./ })
lxc_dir=$LXCS_DIR/$lxchostname
rootfs=$lxc_dir/rootfs
config=$lxc_dir/config

#echo "Logging into /var/log/simplelxc"
exec >>/var/log/simplelxc 2>&1
echo "================================================================================"
echo "$(date +%F\ %T): Running: $0 $@"

export LANGUAGE=C
export LC_ALL=C
export LANG=C

state=template_copy
echo "Creating root file system..." >&3
# create lxc guest system root
mkdir $lxc_dir
cp -apr $template_dir $rootfs

state=configure_guest
echo "Configuring guest..." >&3
sed -i "s/template-$template_name/$lxchostname/g" $(grep -rl "template-$template_name" $rootfs/etc/ 2>/dev/null)
sed -i "s/127.0.0.2/$ipaddr/g" $(grep -rl "127.0.0.2" $rootfs/etc/ 2>/dev/null)

# remove precreated keys in the template and regenerate them
rm -f $rootfs/etc/ssh/ssh_host_*
chroot $rootfs dpkg-reconfigure openssh-server

# create interface file
cat <<EOS > $rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
allow-hotplug eth0
iface eth0 inet static
	address $ipaddr
	network $NETWORK
	netmask $NETMASK
	gateway $HOST_IP
EOS

# lxc host related config
cat <<EOS > $config
lxc.tty = 0
lxc.pts = 1024
lxc.rootfs = $rootfs
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm

# mounts point
lxc.mount.entry=proc $rootfs/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry=devpts $rootfs/dev/pts devpts defaults 0 0
lxc.mount.entry=sysfs $rootfs/sys sysfs defaults  0 0
#lxc.mount.entry=tmpfs $rootfs/var/lock tmpfs defaults 0 0
#lxc.mount.entry=tmpfs $rootfs/var/run tmpfs defaults 0 0

# You can enable these lines if you want your user and home directory in this LXC
# But if you do that, you cant add/remove user inside LXC, gor example you cant
# install an application who create its own user
#lxc.mount.entry=/home $rootfs/home none bind   0 0
#lxc.mount.entry=/etc/passwd $rootfs/etc/passwd none defaults,bind,ro 0 0
#lxc.mount.entry=/etc/shadow $rootfs/etc/shadow none defaults,bind,ro 0 0

lxc.cap.drop = audit_control audit_write mac_admin mac_override mknod net_raw setfcap setpcap sys_admin sys_boot sys_module sys_nice sys_pacct sys_rawio sys_resource sys_time sys_tty_config

lxc.utsname = $lxchostname
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = $BRIDGE_INTERFACE
lxc.network.name = eth0
lxc.network.veth.pair = veth-${lxchostname::10}
lxc.network.hwaddr = $mac
EOS

sed -i "/^CONTAINERS=/s/CONTAINERS=\"\(.*\)\"/CONTAINERS=\" \1 $lxchostname\"/" /etc/default/lxc
ln -s $config /etc/lxc/$lxchostname.conf | :
state=put_keys
# put host key to guest
tmp_umask=$(umask)
umask 077
mkdir -p $rootfs/root/.ssh
cat /etc/ssh/ssh_host_rsa_key.pub >> $rootfs/root/.ssh/authorized_keys
umask $tmp_umask

echo "$(date +%F\ %T): Finished: $0 $@"
echo "================================================================================"

exec 1>&3 2>&4
state=finished
color_echo GREEN "Created new guest '$lxchostname'"

# if there is any open file descriptor before calling lxc-start, it
# fails to start container, so we close our fd's before starting the guest
exec 3>&- 4>&-

echo "You can list the information about guest by
>>> $(get_sl_command) info $lxchostname"

# start guest immediately
$BIN_DIR/guest-start "$lxchostname"

